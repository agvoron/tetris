// jpackage guide
plugins { id 'org.beryx.runtime' version '1.12.7' }

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../assets"]

// jpackage guide - delete leading "project.ext."
mainClassName = "agvoron.tetris.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../assets")

import org.gradle.internal.os.OperatingSystem

// jpackage guide - rename run to runGame
task runGame(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // Required to run on macOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    
    // jpackage guide
    destinationDirectory = file("$buildDir/lib")
}

// jpackage guide
jpackageImage.dependsOn dist

dist.dependsOn classes

eclipse.project.name = appName + "-desktop"

// jpackage guide
runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base',
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        jpackageHome = 'C:/Program Files/Eclipse Adoptium/jdk-17.0.2.8-hotspot'
        mainJar = dist.archiveFileName.get()
        
        imageOptions = ["--icon", file("../assets/icon.ico")] // only for windows
    }

}

// customizing further
task tetrisBundle(dependsOn: jpackageImage, type: Exec) {
  group = 'tetris custom'
  description = 'Edit Windows executable resources'
  workingDir = '../desktop/build/jpackage/desktop/'
  
  String tetrisFilename = allprojects.ext.appName.toString().substring(1, allprojects.ext.appName.toString().length()-1)
  String tetrisVersion = allprojects.version.toString().substring(1, allprojects.version.toString().length()-1)
  
  // remove and reset read-only attribute to use rcedit
  String tetrisBundleCommand = ('attrib -r "desktop.exe" &'
    + ' ren "desktop.exe" "' + tetrisFilename + '.exe" &'
    + ' ren ".\\app\\desktop.cfg" "' + tetrisFilename + '.cfg" &'
    + ' rcedit "' + tetrisFilename + '.exe"'
    + ' --set-file-version "' + tetrisVersion + '"'
    + ' --set-product-version "' + tetrisVersion + '"'
    + ' --set-version-string "OriginalFilename" "' + tetrisFilename + '.exe"'
    + ' --set-version-string "ProductName" "' + tetrisFilename + '"'
    + ' --set-version-string "FileDescription" "This is my Tetris demo for learning LibGDX!"'
    + ' --set-version-string "LegalCopyright" "Copyright - Test"'
    + ' --set-version-string "Comments" "This is my Tetris demo for learning LibGDX!"'
    //+ ' --set-icon ../../../../assets/icon.ico'
    + ' & attrib +r "' + tetrisFilename + '.exe"')
  
  //println tetrisBundleCommand

  commandLine 'cmd', '/c', tetrisBundleCommand

}

task convertIcon(type: Exec) {
  group = 'tetris custom'
  description = 'Convert .png files to .ico bundle for logo'
  workingDir = '../assets'

  commandLine 'cmd', '/c', 'convert logo_16.png logo_32.png logo_48.png logo_128.png logo_256.png -colors 256 -dither None icon.ico'
}
